from pyspark.sql import SparkSession
import os
import pyspark.sql.functions as F

def generate_KPIs():
    spark = (
        SparkSession.builder 
        .appName("Prediction BDM")
        .config("spark.executor.memory", "4g")
        .config("spark.driver.memory", "2g")
        .config("spark.sql.debug.maxToStringFields", 1000) 
        .getOrCreate()
    )
    
    # Read idealista data
    idealista_data = spark.read.parquet("../exploitation_zone/idealista")
    
    # Select specific columns from idealista data
    idealista_data_selected = idealista_data.select(
        'district',
        "neighborhood",
        "id_neighorhood",
        "price",
        "bathrooms",
        "latitude",
        "longitude"
    )
    
    # Coalesce to a single partition to ensure a single output file
    idealista_data_single_file = idealista_data_selected.coalesce(1)
    
    # Write idealista data to a single CSV file
    output_path_idealista = "../exploitation_zone/idealista_data.csv"
    idealista_data_single_file.write.mode("overwrite").option("header", "true").csv(output_path_idealista)
    
    # Rename the part file to idealista_data.csv
    temp_csv_path_idealista = [os.path.join(output_path_idealista, f) for f in os.listdir(output_path_idealista) if f.startswith("part-")][0]
    final_output_path_idealista = os.path.join(output_path_idealista, "idealista_data.csv")
    os.rename(temp_csv_path_idealista, final_output_path_idealista)

    # Read Neighborhood data and filter for the latest year
    neighborhood_data = spark.read.parquet("../exploitation_zone/neighborhood_data")
    latest_year = neighborhood_data.select(F.max("year")).collect()[0][0]
    neighborhood_data_filtered = neighborhood_data.filter(F.col("year") == latest_year)
    
    # Coalesce to a single partition to ensure a single output file
    neighborhood_data_single_file = neighborhood_data_filtered.coalesce(1)
    
    # Write neighborhood data to a single CSV file
    output_path_neighborhood = "../exploitation_zone/neighborhood_data.csv"
    neighborhood_data_single_file.write.mode("overwrite").option("header", "true").csv(output_path_neighborhood)

    # Rename the part file to neighborhood_data.csv
    temp_csv_path_neighborhood = [os.path.join(output_path_neighborhood, f) for f in os.listdir(output_path_neighborhood) if f.startswith("part-")][0]
    final_output_path_neighborhood = os.path.join(output_path_neighborhood, "neighborhood_data.csv")
    os.rename(temp_csv_path_neighborhood, final_output_path_neighborhood)

# Run the KPI generation
generate_KPIs()




