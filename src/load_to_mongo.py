# ---
# jupyter:
#   jupytext:
#     formats: py,ipynb
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.16.2
#   kernelspec:
#     display_name: base
#     language: python
#     name: python3
# ---

# +
import json
from pymongo import MongoClient

# Function to load JSON file into MongoDB
def load_json_to_mongo(file_path, db_name, collection_name, mongo_uri="mongodb://localhost:27017/"):
    # Connect to MongoDB
    client = MongoClient(mongo_uri)
    db = client[db_name]
    collection = db[collection_name]

    # Load JSON Lines file
    with open(file_path, 'r') as file:
        for line in file:
            try:
                data = json.loads(line)
                collection.insert_one(data)
            except json.JSONDecodeError as e:
                print(f"Error decoding JSON: {e}")
        
    print(f"Data from {file_path} has been inserted into the {collection_name} collection in {db_name} database.")


# -

# Example usage
load_json_to_mongo("../P2_data/income_opendata/income_opendata_neighborhood.json", "idealista_collection", "income_open_data", mongo_uri="mongodb://10.4.41.51:27017/")
load_json_to_mongo("../P2_data/lookup_tables/income_lookup_district.json", "idealista_collection", "lookup_distict_income", mongo_uri="mongodb://10.4.41.51:27017/")
load_json_to_mongo("../P2_data/lookup_tables/income_lookup_neighborhood.json", "idealista_collection", "lookup_neighorhood_income", mongo_uri="mongodb://10.4.41.51:27017/")
load_json_to_mongo("../P2_data/lookup_tables/rent_lookup_district.json", "idealista_collection", "lookup_rent_district", mongo_uri="mongodb://10.4.41.51:27017/")
load_json_to_mongo("../P2_data/lookup_tables/rent_lookup_neighborhood.json", "idealista_collection", "lookup_rent_neighorhood", mongo_uri="mongodb://10.4.41.51:27017/")


# +
from pymongo import MongoClient

def check_imported_data(db_name, collection_name, mongo_uri="mongodb://localhost:27017/"):
    # Connect to MongoDB
    client = MongoClient(mongo_uri)
    db = client[db_name]
    collection = db[collection_name]

    # Count the number of documents
    document_count = collection.count_documents({})
    print(f"Number of documents in the collection: {document_count}")

    # Retrieve and print some documents
    sample_docs = collection.find().limit(5)
    for doc in sample_docs:
        print(doc)

# Example usage
check_imported_data("idealista_collection", "income_open_data", mongo_uri="mongodb://10.4.41.51:27017/")


# +
from pyspark.sql import SparkSession
import os
from pyspark.sql.functions import col, lit, to_date

from pyspark.sql import functions as F
from pyspark.sql.functions import max as spark_max

spark = (
    SparkSession.builder 
    .appName("Preprocessing BDM")
    .config("spark.executor.memory", "4g")
    .config("spark.driver.memory", "2g")
    .config("spark.sql.debug.maxToStringFields", 1000) 
    .config("spark.sql.debug.maxToStringFields", 1000) 
    .config('spark.jars.packages', 'org.mongodb.spark:mongo-spark-connector_2.12:3.0.1') \
    .getOrCreate()
)
# -

df = spark.read.json(f'../P2_data/income_opendata/income_opendata_neighborhood.json')

# +
vm_api = "10.4.41.51"

restaurantsRDD = spark.read.format("mongo")\
		.option('uri', f"mongodb://{vm_api}/idealista_collection.income_open_data") \
		.load()
# -

restaurantsRDD.count()
